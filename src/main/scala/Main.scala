object Main {
  def main(args: Array[String]) : Unit = {
    var interpreter : rinterp = new rinterp
    var single = interpreter.parse("5")
    var simpleExpression = interpreter.parse("(+ 5 4)")
    var moreComplex = interpreter.parse("(- (+ 4 3) 5)")
    var withStatement = interpreter.parse("(with ([x (+ 2 3)]) (- x 2))")
    var extraComplex = interpreter.parse("(+ (- (/ 4 2) (+ 0 0)) 5)")
    var mostComplex = interpreter.parse("(+ (- (/ 4 2) (+ 0 0)) (* 5 1))")
    var extremeComplex = interpreter.parse("(+ (- (/ 4 2) (+ 3 4)) (* (- 6 1) (* 1 1)))")

    println("*****Testing Parse Function*****")
    println()
    println("Before Parse: " + "5")
    println("After Parse: " + single.toString)
    println()
    println("Before Parse: " + "(+ 5 4)")
    println("After Parse: " + simpleExpression.toString)
    println()
    println("Before Parse: " + "(- (+ 4 3) 5)")
    println("After Parse: " + moreComplex.toString)
    println()
    println("Before Parse: " + "(with ([x (+ 2 3)]) (- x 2))")
    println("After Parse: " + withStatement.toString)
    println()
    println("Before Parse: " + "(+ (- (/ 4 2) (+ 0 0)) 5)")
    println("After Parse: " + extraComplex.toString)
    println()
    println("Before Parse: " + "(+ (- (/ 4 2) (+ 0 0)) (* 5 1))")
    println("After Parse: " + mostComplex.toString)
    println()
    println("Before Parse: " + "(+ (- (/ 4 2) (+ 3 4)) (* (- 6 1) (* 1 1))")
    println("After Parse: " + extremeComplex.toString)
    println()

    println("*****Testing Calc Function*****")
    println()
    println("Expression: " + "5")
    println(interpreter.calc(single) + " = " + "5")
    println()
    println("Expression: " + "(+ 5 4)")
    println(interpreter.calc(simpleExpression) + " = " + "9")
    println()
    println("Expression: " + "(- (+ 4 3) 5)")
    println(interpreter.calc(moreComplex) + " = " + "2")
    println()
    println("Expression: " + "(with ([x (+ 2 3)]) (- x 2))")
    println(interpreter.calc(withStatement) + " = " + "3")
    println()
    println("Expression: " + "(+ (- (/ 4 2) (+ 0 0)) 5)")
    println(interpreter.calc(extraComplex) + " = " + "7")
    println()
    println("Expression: " + "(+ (- (/ 4 2) (+ 0 0)) (* 5 1))")
    println(interpreter.calc(mostComplex) + " = " + "7")
    println()
    println("Expression: " + "(+ (- (/ 4 2) (+ 3 4)) (* (- 6 1) (* 1 1))")
    println(interpreter.calc(extremeComplex) + " = " + "0")
    println()

    println("*****Error Testing Calc*****")
    println()
    println("Expression: (/ 2 0)")
    var divideByZero = interpreter.parse("(/ 2 0)")
    try println(interpreter.calc(divideByZero) + " = " + "destruction")
    catch {
      case e: ArithmeticException => println("Error message caught: " + e.getMessage)
    }
    println()

    println("*****Error Testing Parse*****")
    println()
    println("Expression: (/ 2 0 3)")
    try {
      var badExpression = interpreter.parse("(/ 2 0 3)")
    } catch {
      case e: RuntimeException => println("Error message caught: " + e.getMessage)
    }
  }
}
